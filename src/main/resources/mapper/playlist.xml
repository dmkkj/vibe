<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mapper.PlaylistMapper">

	<resultMap type="Playlist" id="playlistMap">
		<id column="pl_code" property="plCode" />
		<result column="pl_title" property="plTitle" />
		<result column="pl_img" property="plImg" />
		<result column="pl_date" property="plDate" />
		<result column="pl_public_yn" property="plPublicYn" />
		<result column="pl_code_count" property="likeCount" />
		<association property="user" javaType="User">
			<id column="user_email" property="userEmail" />
			<result column="user_password" property="userPassword" />
			<result column="user_nickname" property="userNickname" />
			<result column="user_img" property="userImg" />
			<result column="user_date" property="userDate" />
			<result column="user_ent_yn" property="userEntYn" />
			<result column="user_spotify_yn" property="userSpotifyYn" />
			<result column="user_gender" property="userGender" />
			<result column="user_birth" property="userBirth" />
			<result column="user_manager" property="userManager" />
			<result column="user_enroll_date" property="userEnrollDate" />
			<result column="user_phone" property="userPhone" />
			<result column="age_group" property="ageGroup" />
		</association>
	</resultMap>

	<!-- 전체플리 조회 -->
	<select id="allPlaylist" resultMap="playlistMap"
		parameterType="SearchDTO">
		SELECT * FROM playlist
		JOIN user USING (user_email)
		WHERE pl_public_yn = 'Y'
		<!-- 타이틀로 검색 쿼리 -->
		<if test="search != null">
			AND pl_title LIKE CONCAT('%', #{search}, '%')
		</if>
		<!-- 태그로 검색 쿼리 -->
		<if test="codes != null">
			AND pl_code IN
			<foreach collection="codes" item="code" open="(" close=")"
				separator=",">
				#{code}
			</foreach>
		</if>
	</select>

	<!-- 플레이리스트 생성 --> <!-- 이미지 추가! -->
	<insert id="createPlaylist" parameterType="CreatePlaylistDTO">
		INSERT INTO
		playlist(pl_title, user_email, pl_img)
		VALUES (#{plTitle}, #{userEmail}, #{plImg})
	</insert>
	
	<!-- 플레이리스트 이미지 업데이트 
	<update id="updatePlaylistImg" parameterType="Playlist">
		UPDATE playlist
		SET pl_img = #{plImg}
		WHERE pl_code = #{pl_code}
	</update>
	-->
	
	<!-- 플레이리스트 제목과 이미지 동시에 업데이트 -->
	<update id="updatePlaylist" parameterType="Playlist">
		UPDATE playlist
		SET pl_title = #{plTitle},
			pl_img = #{plImg}
		WHERE pl_code = #{plCode}
	</update>
	
	
	
	
	<!-- user 탈퇴 시 playlist 정보 넘기기 -->
	<update id="movePlaylist" parameterType="String">
		UPDATE playlist
		SET user_email = 'playlist@vibemaster.com'
		WHERE user_email = #{userEmail}
	</update>

	<!-- 회원 본인의 플레이리스트 조회 -->
	<select id="myPlaylist" resultMap="playlistMap" parameterType="String">
		SELECT * FROM playlist
		WHERE user_email = #{userEmail}
	</select>

	<!-- 플레이리스트 코드로 플레이리스트 정보 조회 -->
	<select id="selectPlaylistByPlCode" resultMap="playlistMap" parameterType="Integer">
		SELECT * FROM playlist
		WHERE pl_code = #{plCode}
	</select>
	
	<!-- 플레이리스트 관련 음악 삭제 -->
    <delete id="deletePlaylistMusic" parameterType="Integer">
        DELETE FROM playlist_music WHERE pl_code = #{plCode}
    </delete>

    <!-- 플레이리스트 삭제 -->
    <delete id="deletePlaylist" parameterType="Integer">
        DELETE FROM playlist WHERE pl_code = #{plCode}
    </delete>
	
	<!-- 플레이리스트 제목 수정 -->
    <update id="updatePlaylistTitle" parameterType="Playlist">
        UPDATE playlist
        SET pl_title = #{plTitle}
        WHERE pl_code = #{plCode}
    </update>
    
    <!-- 랭킹 : 좋아요순 : 리스트 30개 조회-->
    <select id="likerankingPlaylist" resultMap="playlistMap">
    	SELECT pl_code, pl_title, pl_img, pl_date, u.user_email, u.user_nickname
    	FROM playlist p
	    	JOIN user u ON (u.user_email = p.user_email)
	    	LEFT JOIN playlist_like USING (pl_code)
    	WHERE pl_public_yn = 'Y'
    	GROUP BY pl_code
    	ORDER BY COUNT(like_code) DESC;
    </select>

	<!-- 플레이리스트 코드로 태그 이름 조회 -->
	<select id="findTagsByPlaylistCode" resultType="String" parameterType="int">
	    SELECT tag_name 
	    FROM playlist
		    JOIN playlist_tag USING pl_code
		    JOIN tag USING tag_code
	    WHERE pl_code = #{plCode}
	</select>

	<!-- 플레이리스트 랜덤 조회 -->
	<select id="randomPlaylist" resultMap="playlistMap">
		SELECT *
		FROM playlist
		WHERE pl_public_yn = 'Y'
		ORDER BY RAND()
	</select>

	<!-- 검색 태그별 랭킹 조회 -->
	<select id="searchTagRanking" parameterType="String" resultMap="playlistMap">
		SELECT p.pl_code, p.pl_title, p.pl_img, p.pl_date,
		p.pl_public_yn, u.user_nickname, COUNT(*) AS pl_code_count
		FROM playlist p
			JOIN user u ON p.user_email = u.user_email
			JOIN playlist_like pl ON p.pl_code = pl.pl_code
			JOIN playlist_tag pt ON p.pl_code = pt.pl_code
			JOIN tag t ON pt.tag_code = t.tag_code
		WHERE t.tag_name LIKE CONCAT('%', #{tagName}, '%')
		GROUP BY p.pl_code, u.user_nickname
		ORDER BY pl_code_count DESC;
	</select>

	<!-- 한달 동안의 플레이리스트 랭킹 조회 -->
	<select id="playListRankingOnMonth" resultMap="playlistMap">
		SELECT p.pl_code, p.pl_title, p.pl_img, p.pl_date,
		p.pl_public_yn, u.user_nickname, COUNT(*) AS pl_code_count
		FROM playlist p
			JOIN user u ON p.user_email = u.user_email
			JOIN playlist_like pl ON p.pl_code = pl.pl_code
			JOIN playlist_tag pt ON p.pl_code = pt.pl_code
			JOIN tag t ON pt.tag_code = t.tag_code
		WHERE p.pl_date BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH) AND CURRENT_DATE()
		GROUP BY p.pl_code, u.user_nickname
		ORDER BY pl_code_count DESC;
	</select>

	<select id="playListRankingOnAgeGroup" parameterType="String" resultMap="playlistMap">
		SELECT
			CASE
				WHEN FLOOR(DATEDIFF(CURDATE(), u.user_birth) / 365.25) BETWEEN 10 AND 19
					THEN '10대'
				WHEN FLOOR(DATEDIFF(CURDATE(), u.user_birth) / 365.25) BETWEEN 20 AND 29
					THEN '20대'
				WHEN FLOOR(DATEDIFF(CURDATE(), u.user_birth) / 365.25) BETWEEN 30 AND 39
					THEN '30대'
				WHEN FLOOR(DATEDIFF(CURDATE(), u.user_birth) / 365.25) BETWEEN 40 AND 49
					THEN '40대'
				WHEN FLOOR(DATEDIFF(CURDATE(), u.user_birth) / 365.25) BETWEEN 50 AND 59
					THEN '50대'
				ELSE '기타'
			END AS age_group, p.pl_code, p.pl_title, p.pl_img,
			p.pl_date, p.pl_public_yn, u.user_nickname, COUNT(*) AS pl_code_count
		FROM playlist p
			JOIN user u ON p.user_email = u.user_email
			JOIN playlist_like pl ON p.pl_code = pl.pl_code
			JOIN playlist_tag pt ON p.pl_code = pt.pl_code
			JOIN tag t ON pt.tag_code = t.tag_code
		GROUP BY age_group, p.pl_code, u.user_nickname
		HAVING age_group = #{ageGroup}
		ORDER BY age_group, pl_code_count DESC;
	</select>
</mapper>